image: atlassian/default-image:4
definitions:
  services:
    docker:
      memory: 2048
      ###### same scrips for all branches #####
      ####   start ##########
  steps:
  - step: &test_cases
      image: node:18.15-alpine
      name: Running Unit Test
      script:
      - npm i
      - npm run test
      caches:
      - node

  - step: &ecr_push
      size: 2x
      name: Push Image to ECR
      services:
      - docker
      oidc: true
      script:
      - mkdir -p environments
      - echo $ENVDEV >> env.txt
      - base64 -d env.txt >> .env
      - cp .env environments/.env.dev
      - echo $ENVQA >> env.txt
      - base64 -d env.txt >> .env
      - cp .env environments/.env.qa
      - echo $ENVPROD >> env.txt
      - base64 -d env.txt >> .env
      - cp .env environments/.env.prod
      - envsubst < Dockerfile.tpl > Dockerfile
      - cat Dockerfile
      - docker build -t $BITBUCKET_REPO_SLUG:$BITBUCKET_BUILD_NUMBER -t $BITBUCKET_REPO_SLUG:latest -f Dockerfile .
      - pipe: atlassian/aws-ecr-push-image:2.0.0
        variables:
          AWS_OIDC_ROLE_ARN: $AWS_OIDC_ROLE_ARN
          AWS_DEFAULT_REGION: $AWS_DEFAULT_REGION
          IMAGE_NAME: $BITBUCKET_REPO_SLUG
          TAGS: ' $BITBUCKET_BUILD_NUMBER '
  - step: &deploy_to_eks
      name: Deploy to EKS
      script:
      - envsubst < deployment.tpl.yaml > deployment.yaml
      - pipe: atlassian/aws-eks-kubectl-run:2.2.0
        variables:
          AWS_ACCESS_KEY_ID: $AWS_ACCESS_KEY_ID_EKS
          AWS_SECRET_ACCESS_KEY: $AWS_SECRET_ACCESS_KEY_EKS
          AWS_DEFAULT_REGION: $AWS_DEFAULT_REGION
          CLUSTER_NAME: 'gold-cluster'
          KUBECTL_COMMAND: 'apply'
          RESOURCE_PATH: 'deployment.yaml'

pipelines:
  custom:
    build-custom:
    - step: *ecr_push
    - step: *deploy_to_eks

  branches:
    '{dev,prod,qa}':
    - parallel:
      - step: *test_cases
      - step: *ecr_push
    - step: *deploy_to_eks
